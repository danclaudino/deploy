<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AIDE-QC</title><link>https://aide-qc.github.io/deploy/</link><description>Recent content on AIDE-QC</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 19 Oct 2017 15:26:15 +0000</lastBuildDate><atom:link href="https://aide-qc.github.io/deploy/index.xml" rel="self" type="application/rss+xml"/><item><title>Frequently Asked Questions</title><link>https://aide-qc.github.io/deploy/getting_started/Faq/</link><pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate><guid>https://aide-qc.github.io/deploy/getting_started/Faq/</guid><description>First AIDE-QC FAQ :)</description></item><item><title>Build Everything from Source</title><link>https://aide-qc.github.io/deploy/getting_started/build_from_source/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/getting_started/build_from_source/</guid><description>For the adventurous out there, or if your system does not support the above prebuilt binary instructions, you can build the AIDE-QC components from source. First, run the package installer commands for your system to get all requisite dependencies:
OS Command Ubuntu 18.04 # Add ubuntu-toolchain-r/test to get GCC 9 sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y software-properties-common sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y &amp;amp;&amp;amp; sudo apt-get update # Install deps sudo apt-get install -y gcc-9 g++-9 gfortran-9 python3.</description></item><item><title>Hello World</title><link>https://aide-qc.github.io/deploy/users/hello_world/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/users/hello_world/</guid><description>The AIDE-QC software stack promotes a hardware-agnostic, single-source programming model for efficient and extensible heterogeneous quantum-classical computing. Here we want to provide a small hello world example that attempts to demonstrate that model. Specifically, we will show how to program a simple GHZ state quantum kernel that can run on any of the available QPUs that are integrated with the AIDE-QC stack.
Let&amp;rsquo;s start of in C++. We start by describing a quantum kernel - a C++ function, annotated with __qpu__ whose function body contains some quantum code.</description></item><item><title>Implement a new Optimizer</title><link>https://aide-qc.github.io/deploy/developers/implement_optimizer/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/implement_optimizer/</guid><description>Table of Contents Background Create a Custom L-BFGS Optimizer Test the Custom L-BFGS Optimizer Custom Optimizer Options Background The AIDE-QC software stack provides an extension point for classical, multi-variate function optimization. This provides the means to experiment with multiple optimization strategies pertinent to variational quantum computing algorithms (e.g. VQE).
We describe optimization via an extensible Optimizer class. The essential structure of the Optimizer infrastructure is shown below</description></item><item><title>Operators</title><link>https://aide-qc.github.io/deploy/users/operators/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/users/operators/</guid><description>The AIDE-QC stack puts forward as part of the QCOR specification an extensible model for quantum mechanical operators.
We sub-type this concept for operators exposing a certain algebra. We have defined PauliOperator and FermionOperator sub-types, and have put forward a mechanism for transformation between the two.
Spin Operators AIDE-QC puts forward an Operator implementation to model Pauli matrices, Pauli tensor products, and sums of Pauli tensor products. The PauliOperator can be create in C++ and Python and used in the familiar algebraic name.</description></item><item><title>Pass Manager</title><link>https://aide-qc.github.io/deploy/users/pass_manager/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/users/pass_manager/</guid><description/></item><item><title>QCOR C++ Compiler and JIT Engine</title><link>https://aide-qc.github.io/deploy/background/qcor/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/background/qcor/</guid><description/></item><item><title>QCOR Clang Syntax Handler</title><link>https://aide-qc.github.io/deploy/developers/clang_syntax/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/developers/clang_syntax/</guid><description/></item><item><title>Quantum JIT (QJIT)</title><link>https://aide-qc.github.io/deploy/users/qjit/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/users/qjit/</guid><description>The quantum kernel programming model in C++ for the AIDE-QC stack relies on a novel Clang plugin interface called the SyntaxHandler . This infrastructure enables quantum programming with annotated C++ functions in a language agnostic manner. A downside to this is that quantum kernels are defined at compile-time and are therefore less-flexible for use cases where runtime-generated circuits are useful.
To address this, we have put forward an infrastructure for just-in-time compilation of quantum kernels.</description></item><item><title>Quantum Kernels</title><link>https://aide-qc.github.io/deploy/users/quantum_kernels/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/users/quantum_kernels/</guid><description>The AIDE-QC stack programming model treats available QPUs (physical or virtual) as general co-processors. Programming those co-processors consists of defining what we call quantum kernels - standard functions (in the classical language) whose function body is made up of some quantum domain specific language (DSL), and the function is annotated appropriately to indicate that this function is quantum. These domain specific languages can be low-level quantum assembly representations, or high-level language constructs that the qcor compiler can parse and compile to appropriate instructions for the targeted backend.</description></item><item><title>Remote QPU Credentials</title><link>https://aide-qc.github.io/deploy/users/remote_qpu_creds/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/users/remote_qpu_creds/</guid><description>qcor provides a set of command line arguments that make it simple to set your remote QPU API credentials.
IBM API Credentials To execute quantum kernels on the remote IBM backends, run the following
qcor -set-credentials ibm -key YOURKEY -hub YOURHUB -group YOURGROUP -project YOURPROJECT where YOURKEY, YOURHUB, YOURGROUP, and YOURPROJECT are provided by your account with the IBM Quantum ecosystem.
To view your currently set API credentials
qcor -print-credentials ibm To update any aspect of your credentials (could do this for project, group, key, hub)</description></item><item><title>Tensor Network Quantum Virtual Machine</title><link>https://aide-qc.github.io/deploy/users/tnqvm/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/users/tnqvm/</guid><description>Install the TNQVM Show installation with and without exatn. note XACC_DIR is different based on brew, apt-get, and custom installs. Show how to set a XACC_DIR environment variable first and pass to cmake
Using TNQVM Show with xacc alone, show with qcor at c++ and python jit level</description></item><item><title>Using an Optimizer</title><link>https://aide-qc.github.io/deploy/users/using_optimizer/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/users/using_optimizer/</guid><description>Optimizers have proven ubiquitous across variational quantum computation. AIDE-QC is focused on the development of novel optimization strategies for noisy quantum co-processors. To deploy these strategies in an extensible and modular way, the AIDE-QC software stack puts forward and Optimizer interface / concept that can be implemented for particular optimization strategies. Currently, we provide a number of implementations, some of which delegate to popular optimization libraries that provide a wealth of gradient-based and derivative free algorithms.</description></item><item><title>Variational Algorithms</title><link>https://aide-qc.github.io/deploy/users/variational/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/users/variational/</guid><description/></item><item><title>XACC Quantum Programming Framework</title><link>https://aide-qc.github.io/deploy/background/xacc/</link><pubDate>Fri, 29 Nov 2019 15:26:15 +0000</pubDate><guid>https://aide-qc.github.io/deploy/background/xacc/</guid><description/></item><item><title/><link>https://aide-qc.github.io/deploy/background/project/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://aide-qc.github.io/deploy/background/project/</guid><description/></item></channel></rss>